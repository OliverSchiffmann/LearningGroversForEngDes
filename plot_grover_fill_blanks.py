# READ ME:
# This script plots the results from the Grover's algorithm tiling solver.
# It reads tile placement data from an Excel file generated by the
# 'grover_tiling_fill_blanks.py' script (after fixes) and creates
# 3D histograms showing the frequency of placement for each tile at each grid position.
# Both plot windows are displayed simultaneously and can be closed by pressing Enter
# in the terminal after they appear.
# EXERCISE: Find and fix the 5 blanks marked with '# --- BLANK X ---'.

import numpy as np
import openpyxl
import matplotlib.pyplot as plt

# from mpl_toolkits.mplot3d import Axes3D # Explicit import sometimes needed, but often works via projection="3d"

# --- Constants ---
GRID_WIDTH = 8  # The dimension of the square grid (e.g., 8 for an 8x8 grid)

# --- Functions ---


def convert_excel_to_numpy(filename, file_path):
    """
    Opens an Excel sheet and converts its data (excluding the header)
    into a NumPy array.

    Args:
        filename (str): The name of the Excel file (e.g., "grover_results.xlsx").
        file_path (str): The directory path where the Excel file is located.

    Returns:
        numpy.ndarray: A NumPy array containing the data from the sheet.
                       Returns None if file not found or error occurs.
    """
    if not file_path.endswith("/"):
        file_path += "/"
    full_path = file_path + filename
    try:
        workbook = openpyxl.load_workbook(full_path)
        sheet = workbook.active

        # --- BLANK 1 ---
        # There is something wrong with the following line
        data_list = [
            list(row) for row in sheet.iter_rows(min_row=1, values_only=True)
        ]  # Hint: CWhen reading from Excel, do we want to include the very first row (header)

        results = np.array(data_list)
        print(f"Successfully loaded data from: {full_path}")
        return results
    except FileNotFoundError:
        print(f"Error: File not found at {full_path}")
        print("Please ensure the file path and filename are correct.")
        return None
    except Exception as e:
        print(f"An error occurred while reading the Excel file: {e}")
        return None


def sum_column_frequency(data_array, col_num):
    """Sums the values of a specified column."""
    # ... (implementation remains the same) ...
    if data_array is None or data_array.size == 0 or col_num >= data_array.shape[1]:
        # print("Error: Invalid input array or column number for sum_column_frequency.") # Reduced verbosity
        return 0
    try:
        column_sum = np.sum(data_array[:, col_num].astype(float).astype(int))
        return column_sum
    except ValueError as e:
        # print(f"Error converting column {col_num} to numbers for summation: {e}") # Reduced verbosity
        return 0
    except Exception as e:
        # print(f"An error occurred during column summation: {e}") # Reduced verbosity
        return 0


def plot_3d_histogram(frequency_map, plot_title, bar_colour, view_angle="front"):
    """
    Generates a 3D histogram plot AND RETURNS the figure.
    Does NOT call plt.show() itself.
    """
    if frequency_map is None:
        print("Error: Cannot plot histogram, frequency_map is None.")
        return None

    data_array = np.array(frequency_map)
    fig = plt.figure(figsize=(10, 7))

    # --- BLANK 2 ---
    # To create a 3D plot, we need to tell Matplotlib the axes should have 3D projection.
    ax = fig.add_subplot(111)  # Hint: Is an argument missing here for 3D?

    # Set viewing angle
    if view_angle == "front":
        # --- BLANK 3 ---
        # Azimuth (azim) is the angle around the z-axis (like rotating viewpoint on a turntable).
        # Elevation (elev) is the angle above the xy plane.
        ax.view_init(elev=30, azim=90)  # Hint: Are these the best values?
    else:
        ax.view_init(elev=30, azim=45)

    # Create coordinate grid
    x_coords, y_coords = np.meshgrid(
        np.arange(data_array.shape[1]), np.arange(data_array.shape[0])
    )
    x_data = x_coords.flatten()
    y_data = y_coords.flatten()
    z_data = data_array.flatten()

    # Plot the 3D bars
    ax.bar3d(
        x_data,
        y_data,
        np.zeros_like(z_data),
        1,
        1,
        z_data,
        shade=True,
        color=bar_colour,
        edgecolor="grey",
        linewidth=0.5,
    )

    # Set axis labels and title
    ax.set_xlabel("Grid X-coordinate", labelpad=10)
    ax.set_ylabel("Grid Y-coordinate", labelpad=10)
    ax.set_zlabel("Frequency Count", labelpad=10)
    ax.set_title(plot_title)

    # Set ticks
    ax.set_xticks(np.arange(GRID_WIDTH))
    ax.set_yticks(np.arange(GRID_WIDTH))

    return fig


def create_frequency_map(results_data, tile_column_index, frequency_column_index):
    """Creates a 2D frequency map from results data."""
    if results_data is None:
        print("Error: Input data is None in create_frequency_map.")
        return None

    frequency_map = np.zeros((GRID_WIDTH, GRID_WIDTH), dtype=float)

    for row_index, row in enumerate(results_data):
        try:
            position_str = str(row[tile_column_index]).strip()
            frequency = float(row[frequency_column_index])

            if position_str.startswith("(") and position_str.endswith(")"):
                coords = position_str.strip("()").split(",")
                if len(coords) == 2:
                    x_coord = int(coords[0].strip())
                    y_coord = int(coords[1].strip())

                    if 0 <= x_coord < GRID_WIDTH and 0 <= y_coord < GRID_WIDTH:
                        # --- BLANK 4 ---
                        # When adding frequency to the map, numpy arrays use [row, column] indexing.
                        # What order should x_coord and y_coord appear in the line?
                        frequency_map[x_coord, x_coord] += frequency
                    else:
                        # Warning for out-of-bounds coordinates (reduced verbosity)
                        pass
                else:
                    # Warning for parsing error (reduced verbosity)
                    pass
            else:
                # Warning for invalid format (reduced verbosity)
                pass
        except (
            ValueError,
            IndexError,
            TypeError,
        ) as e:  # Added TypeError for issues from Blank 1
            # Warning for processing error (reduced verbosity)
            # print(f"Warning: Skipping row {row_index+1}...") # Adjusted row index display if Blank 1 active
            continue

    return frequency_map


# --- Main Execution ---

if __name__ == "__main__":
    # --- Configuration ---
    file_path = "/Users/kv18799/Library/CloudStorage/OneDrive-UniversityofBristol/Documents/PhD/Outreach/work experience demo/"
    filename = "grover_tiling_results.xlsx"

    # --- Load Data ---
    results_data = convert_excel_to_numpy(filename, file_path)

    if results_data is not None:
        print("\n--- Data Summary ---")
        # ... (summary print statements remain the same) ...
        print(f"Loaded data shape: {results_data.shape}")
        print("Sample of loaded data (first 5 rows):")
        print(results_data[:5, :])
        total_frequency = sum_column_frequency(results_data, 2)
        print(f"\nTotal frequency count from file: {total_frequency}")
        print(
            "(This should ideally match the number of shots used in the Grover script, unless Blank 1 remain unfixed)"
        )

        # --- Generate Frequency Maps ---
        print("\n--- Generating Frequency Maps ---")
        # Note: If Blank 1 is active, create_frequency_map might receive invalid data
        # and print warnings or produce an incorrect map.
        frequency_map_tile1 = create_frequency_map(results_data, 0, 2)
        frequency_map_tile2 = create_frequency_map(results_data, 1, 2)

        # --- Print Frequency Maps (Optional Debugging) ---
        # ... (print statements remain the same) ...
        if frequency_map_tile1 is not None:
            print("\nFrequency Map for Tile 1 (Value is total frequency at [y, x]):")
            print(
                frequency_map_tile1
            )  # If Blank 4 active, this map will look transposed/incorrect
        if frequency_map_tile2 is not None:
            print("\nFrequency Map for Tile 2 (Value is total frequency at [y, x]):")
            print(frequency_map_tile2)

        # --- Create Plot Figures ---
        print("\n--- Creating Plot Figures ---")
        fig1 = None
        fig2 = None

        if frequency_map_tile1 is not None:
            # Note: If Blank 2 or 3 active, plot generation might fail or look wrong.
            fig1 = plot_3d_histogram(
                frequency_map_tile1,
                "Tile 1 Placement Frequency (Grover)",
                "skyblue",
                view_angle="front",
            )

        if frequency_map_tile2 is not None:
            fig2 = plot_3d_histogram(
                frequency_map_tile2,
                "Tile 2 Placement Frequency (Grover)",
                "lightcoral",
                view_angle="front",
            )

        # --- Show Plots and Wait ---
        if fig1 or fig2:
            print("\n--- Displaying Plot Windows ---")
            plt.show(block=False)

            print("\n---> Plot windows are now displayed.")
            input(
                "---> Press Enter in this terminal to close all plot windows and exit the script... "
            )

            # --- BLANK 5 ---
            # After the user presses Enter, should the script automatically close the plot windows?
            # plt.close("all") # Hint: What happens if this line is commented out?
            print("\n--- Plot windows need manual closing (if Blank 5 active) ---")

        else:
            print("\nNo valid plots were generated. Skipping display.")

        print("\n--- Script Finished ---")
    else:
        print("\n--- Script Terminated Due to Data Loading Error ---")
